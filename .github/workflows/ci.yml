name: Java CI with Gradle

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  OPENSHIFT_SERVER_URL: "https://api.sandbox-m3.1530.p1.openshiftapps.com:6443"
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_DEV_TOKEN }}
  OPENSHIFT_NAMESPACE: "uniwinux-dev"   
  DOCKER_IMAGE: "docker.io/openjdk:8-jre-alpine"
  TIMEZONEREGION: "America"
  TIMEZONECITY: "Toronto"
  PULLSECRET: pullsecret
  REGISTRY: docker.io
  CHARTVERSION: 1.0.0
  REPOSITORY: openjdk
  TAG: 8-jre-alpine
  PORT: 8080
  HOSTNAME: jvm-uniwinux-dev.apps.sandbox-m3.1530.p1.openshiftapps.com
     
jobs:
  build-java:

    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: |
        echo "Starting gradle build"
        set -x
        export JAR_FOLDER=build/libs
        # build the binary
        ./gradlew build -x test
        # get the parameters of gradle
        ./gradlew properties -q >p    
        # save the parameters to be available as env
        export GRADLE_NAME=$(cat p | grep "name:" | awk '{print $2}')  
        echo GRADLE_NAME=$GRADLE_NAME >> $GITHUB_ENV 
        export GRADLE_VERSION=$(cat p | grep "version:" | awk '{print $2}')   
        echo GRADLE_VERSION=$GRADLE_VERSION >> $GITHUB_ENV
        [[ -f $JAR_FOLDER/$GRADLE_NAME-$GRADLE_VERSION.jar ]] && echo "GRADLE_EXT=jar" >> $GITHUB_ENV \
           && export GRADLE_EXT=jar
        if [[ "$GRADLE_EXT" == "" ]]; then 
          [[ -f $JAR_FOLDER/$GRADLE_NAME-$GRADLE_VERSION.war ]] && echo "GRADLE_EXT=war" >> $GITHUB_ENV \
            && export GRADLE_EXT=war
        fi
        if [[ "$GRADLE_EXT" == "" ]]; then echo "Cannot determine the file extension!" && exit 1; fi  
        export GRADLE_BIN=$GRADLE_NAME-$GRADLE_VERSION.$GRADLE_EXT 
        echo GRADLE_BIN=$GRADLE_BIN >> $GITHUB_ENV
        echo ENV_CONTEXT=$GRADLE_NAME >> $GITHUB_ENV
        cp $JAR_FOLDER/$GRADLE_BIN . 

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./Dockerfile
        build-args: |
            DOCKER_IMAGE=${{ env.DOCKER_IMAGE }}
            GRADLE_BIN=${{ env.GRADLE_BIN }}
            ENV_CONTEXT=${{ env.GRADLE_NAME }}
            TIMEZONEREGION=${{ env.TIMEZONEREGION }}
            TIMEZONECITY=${{ env.TIMEZONECITY }}
            push: true
            tags: ${{ secrets.DOCKER_USERNAME }}/${{ env.GRADLE_NAME }}:latest

    - name: Authenticate and set context
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ env.OPENSHIFT_SERVER_URL }}
        openshift_token: ${{ env.OPENSHIFT_TOKEN }}
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}            

    - name: Install oc cli
      uses: redhat-actions/oc-installer@v1
      with:
        oc_version: 'latest'        

    - name: Create pullsecret
      run: |
        # Capture the path of oc
        which oc >/tmp/oc
        # Execute oc (with path)
        $(cat /tmp/oc) create secret docker-registry ${{ env.PULLSECRET}} \
        --docker-server="${{ env.REGISTRY }}" --docker-username="${{ secrets.DOCKER_USERNAME }}" \
        --docker-password="${{ secrets.DOCKER_PASSWORD }}" --docker-email=unused 2>/dev/null || true    
   
    - name: Execute template for helm
      run: |
        # set debug
        set -x
        # to remove the warnings on the console output
        chmod 600 -R ocp/helm/*.yaml
        # expose replace function
        . ocp/scripts/s_replace.sh
        # update the template  
        declare -a arr=("ocp/helm/Chart.yaml" "ocp/helm/values.yaml")
        ## now loop through the above array
        for i in "${arr[@]}"
        do
            s_replace "xNAMESPACEx" "${{ env.OPENSHIFT_NAMESPACE }}" "$i"
            s_replace "xNAMEx" "${{ env.GRADLE_NAME }}" "$i"
            s_replace "xPULLSECRETx" "${{ env.PULLSECRET }}" "$i"
            s_replace "xCHARTVERSIONx" "${{ env.CHARTVERSION }}" "$i"
            s_replace "xAPPVERSIONx" "${{ env.GRADLE_VERSION }}" "$i"
            s_replace "xGRADLE_BINx" "${{ env.GRADLE_BIN }}" "$i"
            s_replace "xREGISTRYx" "${{ env.REGISTRY }}" "$i"
            s_replace "xREPOSITORYx" "${{ env.REPOSITORY }}" "$i"
            s_replace "xTAGx" "${{ env.TAG }}" "$i"
            s_replace "xDOCKER_USERx" "${{ secrets.DOCKER_USERNAME }}" "$i"      
            s_replace "xPORTx" "${{ env.PORT }}" "$i" 
            s_replace "xHOSTNAMEx" "${{ env.HOSTNAME }}" "$i"
        done
        echo -----------verify Chart.yaml
        cat ocp/helm/Chart.yaml
        echo -----------verify values.yaml
        cat ocp/helm/values.yaml     
              
    - name: Install Helm
      uses: azure/setup-helm@v4.2.0
      with:
        version: 'latest' # default is latest (stable)
      id: install
    
    - name: Deploy
      run: |
        cd ocp/helm 
        # update 
        helm dependency update
        # helm check     
        helm lint . || exit 1 
        # helm deploy the app
        # you can only use either template or upgrade/install at a time 
        helm upgrade --install ${{ env.GRADLE_NAME }} .        
         